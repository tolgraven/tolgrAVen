/* MODIFICATIONS / BULK GENERIC STYLE CLASSES (ish, damn hard to decide on some stuff) */
/* mostly trying to clean up main.css a bit... */

.fader {
  position: relative;
  z-index: 25;
  width: 100%;
  pointer-events: none;
}
.fade-to-black { /* well this is certainly a misnomer. .fade-to? */
  position: absolute;
  width: 100%;
  --fade-to-color: var(--bg-1);
  transition: all 0.5s ease;

  &.tall {
    height: calc(10 * var(--space-lg));
  }
}
.fade-to-black.white { /* well this is certainly a misnomer. .fade-to? */
  --fade-to-color: var(--fg-1);
}
.fade-to-black.top {
  top: 0;
  height: calc(6 * var(--space));
  background: linear-gradient(180deg, var(--fade-to-color) 50%, transparent 100%);
}
.fade-to-black.bottom {
  bottom: 0;
  height: calc(6 * var(--space));
  background: linear-gradient(0deg, var(--fade-to-color) 0%, transparent 100%);
}
.fade-to-black.between {
  --height: 4.5;
  height: calc(var(--height) * var(--space-lg));
  top:    calc(-0.5 * var(--height) * var(--space-lg));
  background: linear-gradient(0deg,
      hsla(var(--hue-3), 2%, var(--lum-bg-1), 0.0)  0%,
      hsl(var(--hue-3), 8%, var(--lum-bg-2)) 50%,
      hsla(var(--hue-3), 28%, var(--lum-bg-2), 0.0)  100%);
}
.fade-to-black.between.red {
  background: linear-gradient(0deg, transparent 0%,
      hsl(var(--hue-2), 8%, var(--lum-bg-2)) 50%,
      transparent 90%);
}
.fade-to-black.light-from-below {
  background: linear-gradient(180deg, transparent 0%,
      hsl(var(--hue-2), 8%, var(--lum-light-2)) 120%);
  --height: 25vh; // problem attic but cant just put percentage then get nothing
  height: calc(var(--height));
  bottom: 0;
}

/* * * * * * * * * * * * * * *
 * MODS FOR PAGE TRANSITIONS *
 * * * * * * * * * * * * * * */
.swapper {
  position: relative;
}
.swapped {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transform: none;
  opacity: 1;

  transition: all var(--navigation-transition-time) ease;
  z-index: -1;

  display: inherit;
  pointer-events: none;
  div {
    transition: all none;
  }
  
  &.opacity {
    opacity: 0;
    transition: all var(--navigation-transition-time) ease;
  }
  &.left {
    z-index: -1;
    transform: translateX(-150%);
  }

  &.swapped-out { // bc we cant animate display: none so would need a yet additional class to fully hide right? nuke from dom seems wiser tho...
    display: none;
  }
}

.swap-in {
  transition: all 0.0s; // i guess so opacity 0 get applied instantly?
  // transform-style: preserve-3d;
  // perspective: 1000px;

  &.right {
    transform: translateX(150%);
    transition: all 0.0s;
    z-index: -1;
  }
  &.left {
    transform: translateX(-150%);
    transition: all 0.0s;
    z-index: -1;
  }
  &.rotate {
    transform: rotateY(180deg) translateZ(-500px);
    perspective-origin: bottom;
    // backface-visibility: hidden;
  }
  &.opacity {
    opacity: 0;
  }
  &.swapped-in {
    transition: all var(--navigation-transition-time) ease;
    opacity: 1;
    transform: none;
  }
}



/* Show/hide and slide in from left. */
.slide-in-reset {
    position: relative;
    z-index: 0;
    left: 0;
    right: 0;
    transition: 0.4s;
    /* transition-delay: opacity 0.1s; */
}
.slide-out-left { left: -100%; }
.slide-out-right { right: -100%; }

.hidden {
  visibility: hidden !important;
  opacity: 0;
  transition: visibility 0s 0.15s, opacity 0.15s ease-in;
}
.visible {
  visibility: visible !important;
  opacity: 1;
  transition: opacity 0.15s ease-out;
}
.removed  { display: none; }
.restored { display: inherit; }

.inline { display: inline; }

.nomargin { margin: 0 }
.nopadding { padding: 0 }

.solid-bg {
  background-color: var(--bg-1);
}
.grad-bg {
  background: var(--anim-gradient);
}
.hi-z {
  z-index: 99;
}

.fullscreen { // expand to entire width of screen, past main...
  border: var(--line-width) solid var(--fg-6) !important;
  margin-left: calc(0px - var(--space-sides)) !important;
  margin-right: calc(0px - var(--space-sides)) !important;
  width: calc(100vw - 1 * var(--line-width-vert)) !important; // no idea why 1x not 2x hah
  max-width: unset !important;
}

.fullwide { /* expand div back to full width of main despite regular paddings/margins */
  /* guess should work to only fuck w margin+width directly not left etc? */
  /* i guess this should be for only when breaking out of margin bs */
  /* not the other bg fullwide stuff... */
  margin: 0;
  padding: 0;
  position: relative;
  left: 0;
  /* left:  calc(0% - 0.5 * var(--space-sides)); */
  width: #{'min(100%, var(--media-width-main))'};
}
.fullwide > .media {
  max-width: unset;
  margin: 0;
}
.widescreen-safe { /* ensure bottom doesnt run out of 16:9 bg media on (ironically) _thin_ screens */
  height: calc(1.0 * var(--header-with-menu-height)); /* just, some nice tall enough height - max-height will save us anyways */
  max-height: calc((100vw - (2 * var(--space-edges))) / 2);
}


.stick-up { /* make sticky just below header */
  position: sticky !important;
  top: var(--header-height-current);
}

.stick-absolute {
  position: absolute !important;
  top: var(--header-height-current);
}
.stick-fixed {
  position: fixed !important;
  top: var(--header-height-current);
}

.appear-wrapper {
  // display: initial; // initial doesnt work, this seems to. but this might change other types than inlines behavior? yup screws with blog-post
  // display: inline-block; // initial doesnt work, this seems to. but this might change other types than inlines behavior? yup screws with blog-post
  // ^^ above also screws up appearing text with [seen]. let's find what breaks without it?
  // width: 100%; // same as above, fixes but maybe also screws? yes it does
  transition: all 0.45s;
  
  &.opacity {
    opacity: 0;
    transition: opacity 1.0s;
  }
  
  &.zoom {
    opacity: 0;
    transform: scale(0);
  }
  &.zoom-y {
    opacity: 0;
    transform: scaleY(0);
  }
  &.zoom-x {
    opacity: 0;
    transform: scaleX(0);
    transition: transform 0.55s;
  }
  &.slide-in {
    opacity: 0;
    transform: translateY(20%);
    transition: opacity 0.12s, transform 0.35s ease;
  }
  &.slide-behind {
    opacity: 0.5;
    z-index: -1;
    transform: translateY(-80%) scaleY(0.4);
    transition: opacity 0.12s, transform 0.35s ease;
  }
  &.slide-from-right {
    opacity: 0.0;
    z-index: -1;
    transform: translateY(80%) scaleY(0.8);
    transition: opacity 0.12s, transform 0.35s ease;
  }
  &.basic {
    visibility: hidden;
  }
  &.background * {
    background-color: transparent;
  }
  
  &.appeared {
    opacity: 1;
    transform: none;
    visibility: visible;
    background-color: initial;
  }
  &.fast {       transition: all 0.25s ease; }
  &.faster {     transition: all 0.15s ease; }
  &.slow {       transition: all 1.0s ease; }
  &.extra-slow { transition: all 2.2s ease; }
  &.super-slow { transition: all 4.5s ease; }
}

.covering, .covering-2, .covering-3 { /* just, hide-out earlier stupid stickies. z-index should be a mixin giving layer, or by js parsing past? */
  background: var(--gradient-bg-main);
}
.covering { /* just, hide-out earlier stupid stickies. z-index should be a mixin giving layer, or by js parsing past? */
  z-index: 10;
}
.covering-2 { /* just, hide-out earlier stupid stickies. z-index should be a mixin giving layer, or by js parsing past? */
  z-index: 20;
}
.covering-3 { /* just, hide-out earlier stupid stickies. z-index should be a mixin giving layer, or by js parsing past? */
  z-index: 30;
}
.covering-faded { /* jk */ /* incidentally not easy to type on a proper vim setup */
  --opacity: 0.65;
  --color-1: hsl(var(--hue-1),  38%,  var(--lum-bg-1));
  --color-2: hsl(var(--hue-2),  36%,  var(--lum-bg-1));
  background: linear-gradient(-40deg, var(--color-1), var(--color-2));
  opacity: var(--opacity);
  transition: opacity 0.4s;
  /* think prob compositing is bad enough, even worse with gradient or? */
  /* definitely move to burn-in on video either way. then if want to transition to no fg do it by fading to orig version */
  /* if html n shit server side can just have it gen appropriate vids/imgs etc once from settings */
  pointer-events: none; // pass through so can click play below if blocking autoplay or on battery-save
  z-index: 10;
}
.covering-faded:hover, .covering-faded:focus { /* jk */ /* incidentally not easy to type on a proper vim setup */
  opacity: 0.50;
}

.anim-gradient-bg {
  --opacity: 1.00;
  --deg: -40deg;
  --color-1: hsla(var(--hue-1),  39%,  var(--lum-bg-3), var(--opacity));
  --color-2: hsla(var(--hue-2),  35%,  var(--lum-bg-3), var(--opacity));
  /* background: linear-gradient(-30deg, var(--color-1), var(--bg-1)); */
  background: linear-gradient(var(--deg), var(--color-1), var(--color-2));
  background-size: 230%;
  animation: gradient-bg 25s ease infinite;
  // backdrop-filter: blur(4px) contrast(70%);
}
@keyframes gradient-bg {
	0%     { background-position:   0% 50%;
	} 40%  { background-position: 100% 50%;
	} 70%  { background-position: 50% 0%;
	} 100% { background-position:   0% 50%;
	}
}


.blur-bg { /* backdrop-filter is finicky with transitions, so... */
  position: absolute;
  top: 0; left: 0;
  /* pointer-events: none; */
  width: 100%;
  z-index: -1;
  height: 100%;
  opacity: 0.6;
  backdrop-filter: blur(2rem) brightness(110%);
  transition: opacity 0.5s;
}
button:hover .blur-bg, button:active .blur-bg,
.blur-bg:hover, .blur-bg:active {
  opacity: 0.8;
}
.blur-behind {
  backdrop-filter: blur(1rem);
}


.center-content {
  display: flex;
  justify-content: center;
  align-items: center;
}

.opacity-3 { opacity: 0.38; }
.opacity-5 { opacity: 0.58; }
.opacity-8 { opacity: 0.85; }
.darken-3 { filter: brightness(45%); }
.darken-5 { filter: brightness(70%); }
.darken-8 { filter: brightness(85%); }

.transparent-border {
  border: var(--line-width) solid transparent !important;
}
.noborder, .horizborders, .vertborders, .topborder, .bottomborder {
  border: 0;
}
.horizborders { /* already got by default but if need to wrap something else */
  border-top:    var(--line-width) solid var(--line-color); /* so, every other top+bottom? */
  border-bottom: var(--line-width) solid var(--line-color); /* this covers/cancels bottom border */
}
.vertborders { /* already got by default but if need to wrap something else */
  border-left:  var(--line-width-vert) solid var(--line-color); /* so, every other top+bottom? */
  border-right: var(--line-width-vert) solid var(--line-color); /* this covers/cancels bottom border */
}
.topborder { border-top: var(--line-width-sm) solid var(--line-color); }
.bottomborder { border-bottom: var(--line-width-sm) solid var(--line-color); }

.darken-fadeout { // for root. make everything darkkk
  transition: filter 5s ease;
  filter: brightness(0.5);
}
.darken-fadeout-restore { // for class/type/elem, restore brightness + pop
  transition: filter 5s ease;
  filter: brightness(1.15);
}

/* PARALLAX */
/* needs to be torn down and redone properly. messy as balls now */

.parallax-wrapper {
  /* guess two ways to force parallax: */
  /* 1. sticky i know and hate */
  /* 2. set specific container height + overflow (btw not "non-dynamic" now that we're jsing) */
  position: relative;
  height: 100%; /* default, can override in attrs */
  width: 100%;
  perspective: calc(1px * var(--perspective)); /* re-enable perspective for parallax to work */
  perspective-origin: center; /* starts where i want but then want it going other dir... or maybe going up-away better, more understated... */
  overflow-y: auto;
}
.parallax-group {
  position: relative;
  transform-style: preserve-3d;
}
.parallax-layer {
}


.perspective-top { /* default perspective for main. */
  perspective: calc(1px * var(--perspective));
  perspective-origin: center; /* starts where i want but then want it going other dir... or maybe going up-away better, more understated... */
}
.parallax-sm, .parallax-bg, .parallax-fg {
  transform-origin: center;
  transform-style: preserve-3d;
  overflow-y: auto;
}
.parallax-sm {
  transform: translateZ(var(--parallax-sm-px))
             // translateY(-1%)
             scale(var(--parallax-sm-scale));
}

/* Fix for elements with both media-as-bg and parallax classes */
.media-as-bg.parallax-sm {
  transform: translateZ(var(--parallax-sm-px))
             translateY(5.5%)
             scale(calc(1.125 * var(--parallax-sm-scale)));
}

.media-as-bg.parallax-bg {
  transform: translateZ(var(--parallax-px))
             translateY(5.5%)
             scale(calc(1.125 * var(--parallax-scale)));
}
.parallax-bg {
  transform: translateZ(var(--parallax-px))
             // translateY(-2%)
             scale(var(--parallax-scale));

  z-index: -1;
  /* another issue being mindfuck of using this as fg (ie text) heh... */
  /* transform-origin: 50% -150%; *1/ /1* perf on chrome, mac safari, but fucks ios... */
}
.parallax-fg {
  transform: translateZ(calc(-1px * var(--parallax-sm))) scale(calc(1 / var(--parallax-sm-scale))); /* not actually being translated... 1.1 is the 1:1 scale btw obv but 1.2 looks good in this case */
}
.parallax-squeeze {
  transform-origin: 50% var(--parallax-squeeze-tf); /* obviously... not realistic */
  transform: translateZ(var(--parallax-squeeze-px)) scale(var(--parallax-squeeze-scale)); /* not actually being translated... 1.1 is the 1:1 scale btw obv but 1.2 looks good in this case */
  /* transform-style: preserve-3d; */
}
.origin-toptop {
  transform-origin: 50% -100%;
}


.debug-layers * {
  /* -webkit-transform: translate3d(150px, 0, -150px) rotateY(30deg); */
  /* transform: translate3d(10px, -25px, -10px) rotateY(30deg); */
  /* transform:  rotateZ(30deg); */
  // transform: translate3d(10px, -55px, -10px)
  transform-origin: top;
  transform: translate3d(10px, -95px, -30px)
             rotateY(1deg)
             rotateX(-1deg);
  /* opacity: 0.85; */
  transition: transform 0.3s;
}
* { /*for animation both ways */
  transform: none;
  transition: transform 0.3s;
}
.debug-layers {         box-shadow: 0 0 0 1px #6d8; }
.debug-layers div {     box-shadow: 0 0 0 1px #3bf; }
.debug-layers section { box-shadow: 0 0 0 1px #fb5; }
.debug-layers .media img video {  box-shadow: 0 0 0 2px #f62; }

.inline { display: inline; }
.flex { display: flex; }
.box-regular { box-shadow: 2px 1px 17px 7px var(--box-regular-color); }
.box-faint {   box-shadow: 2px 1px 17px 7px var(--box-faint-color); }

@keyframes blinking {
	20%     { opacity:   0%;
	} 40%  { background-position: 100%;
	} 70%  { background-position: 50%;
	} 80% { background-position: 0%;
	}
}
.blinking {
  animation: blinking 1s infinite;
}

@keyframes inverse {
	50%     { filter: invert(1); }
}
@keyframes brighten {
	0%     { filter: brightness(100%); }
	50%     { filter: brightness(250%); }
	80%     { filter: brightness(30%); }
}
@keyframes darken {
	40%     { filter: brightness(0.3); }
}

.ripple-on-click {
  position: absolute;
  // top: 0;
  // left: 0;
  width: 10rem;
  height: 10rem;
  // overflow: hidden;
  transform: translate3d(0, 0, 0);
  pointer-events: none;
  background-image: radial-gradient(circle, #000 10%, transparent 13.01%, var(--blue-2) 20%, transparent 21%);
  background-repeat: round;
  background-position: 0%;
  opacity: 0.0;
  transform: scale(1, 1);
  transition: transform 0.3s, opacity 0.2s;

  // animation: ripple 0.15s ease infinite;

  &.ripple {
    transform: scale(5, 5);
    opacity: 0.15;
    // transition: opacity 0.5s;
  }
}

@keyframes ripple {
  0% {
    opacity: 0;
    transform: scale(1, 1);
  }
  5% {
    opacity: 0.2;
  }
  90% {
    // transform: scale(10, 10);
  }
  98% {
    opacity: 0.05;
  }
  100% {
    opacity: 0;
    // transform: scale(1, 1);
  }
}

